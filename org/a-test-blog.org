#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+AUTHOR: mzimmerm
#+DATE: 2017-04-08 Sat 17:23
#+TITLE: a-test-blog 
#+DESCRIPTION: Testing org2jekyll-create-draft
#+TAGS: tag1 org2jekyll
#+CATEGORIES: categories_required
#+PROPERTY: header-args :dir /home/mzimmermann/tmp/one


This file is testing  misc org conversions to Html.

All props except dir are front matter, generated by ~org2jekyll-create-draft~


* Basic Babel export to Html

This source:

#+BEGIN_SRC org
#+BEGIN_SRC bash :exports both
ls -1
#+END_SRC

Results in this:

#+END_SRC
#+BEGIN_SRC bash :exports both
ls -1
#+END_SRC

* What did ~org2jekyll-create-draft~ do

It created an empty file with Org front matter like this:

#+BEGIN_SRC org
#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+AUTHOR: mzimmerm
#+DATE: 2017-04-08 Sat 17:23
#+TITLE: a-test-blog 
#+DESCRIPTION: Testing org2jekyll-create-draft
#+TAGS: org_mode org2jekyll
#+CATEGORIES: categories_required
#+END_SRC

The file name is *a-test-blog.org* so this is concatenated from title, with no date. 

* Verbatim vs Code = vs ~
- This is a =literal (verbatim) text= (surrounded by = ) in text. 

- This is a ~literal code section text~  (surrounded by ~ ) in text. 
 
- So the above, by default, shows that verbatim and code has same font after conversion to html.
 
- Next is src _ bash exports code: src_bash[:exports code]{ls -l} as inline code - could just use ~ls -l~ but the src _ bash allows other options.

- Next is src _ bash exports both does not work: src_ bash[:exports both]{ls -l} as inline code.

- Next is src _ bash surrounded by ~ in text: ~src_bash[:exports code]{ls -l}~

- Last is using BEGIN_ SRC - this seems to format and everything

  #+BEGIN_SRC bash
  ls -l
  #+END_SRC
   
* 3 types of lists

The list test below is borrowed from http://www.network-theory.co.uk/docs/orgmode/Plainlists.html

/Ordered List/: My favorite scenes are (in this order)
1. The attack of the Rohirrim
2. Eowyn's fight with the witch king
   + This was already my favorite scene in the book
   + I really like Miranda Otto.
3. Peter Jackson being shot by Legolas
4. on DVD only
/Unordered List/: 
- He makes a really funny face when it happens.
- But in the end, no individual scenes matter but the film as a whole.
/Description List/: Does not indent items. Important actors in this film are:
- Elijah Wood   :: He plays Frodo
- Sean Astin    :: He plays Sam, Frodo's friend.  I still remember 
                   him very well from his role as Mikey Walsh in The Goonies.
- Abrakah Dabra :: Is cool.

* Code highlighting

Bash code:

#+BEGIN_SRC bash :results output

  AVAR="something"
  OTHER="soma else"

  echo "Variable AVAR is set to ${AVAR}"
  if [ $AVAR = "something" ]; then
      echo "AVAR was as expected"
  else
      echo "UNEXPECTED AVAR"
  fi
#+END_SRC

#+RESULTS:
: Variable AVAR is set to something
: AVAR was as expected

Groovy code equivalent:

#+BEGIN_SRC python :results output

  AVAR   = "something"
  OTHER  = "soma else"

  print ("Variable AVAR is set to ") + AVAR
  if AVAR == "something":
      print( "AVAR was as expected")
  else:
      print ("UNEXPECTED AVAR")

#+END_SRC

#+RESULTS:
: Variable AVAR is set to something
: AVAR was as expected





* TODO Properties
:PROPERTIES:
:one:      1
:END:

A property is a key-value pair associated with an entry. Here, "entry" is:

- the whole document
- tree started with heading

Properties can be set so they are associated with a single entry, with every entry in a tree, or with every entry in an Org mode file.

Properties are like tags, but with a value. 

Where can property be defined:

- Either anywhere in file (but do it always on top) as 
  #+BEGIN_SRC org
  #+PROPERTY: property-name-string property-value-string
  #+END_SRC
- Or in a drawer just below a heading as  
  #+BEGIN_SRC org
  :PROPERTIES:
  :property-name-string: property-value-string
  :END:
  #+END_SRC

Note the syntactic difference on how the key is defined 

- in the PROPERTY section, *key is not surrounded with :* 
- in the BEGIN_ SRC *key is urrounded with :* 

But the *name of the key is in both cases =property-name-string=

For someone using org-babel a lot, I have really only encountered use of properties in defining the overwhelmingly complex property called header-args.

I was, for the longest time, I was confused in how the  *TODO* - finish this

** Testing the =header-arguments :dir= property

*** Create some dirs

#+BEGIN_SRC bash :exports code

mkdir --parent /home/mzimmermann/tmp/{one,two,three}
echo "" > /home/mzimmermann/tmp/one/file-1.txt
echo "" > /home/mzimmermann/tmp/two/file-2.txt
echo "" > /home/mzimmermann/tmp/three/file-3.txt

#+END_SRC

#+RESULTS:


There is a standard property with key named =dir=. This is a path to directory where Babel source blocks are executed.

This experiment shows how this property can be defined.

*** 1. First result uses global (top) definition of dir = /home/mzimmermann/tmp/one

#+BEGIN_SRC emacs-lisp :exports both
(directory-files ".")
#+END_SRC

#+RESULTS:
| . | .. | file-1.txt |


*** 2. Second result uses the BEGIN_ SRC  definition of dir = /home/mzimmermann/tmp/two

#+BEGIN_SRC emacs-lisp :dir /home/mzimmermann/tmp/two  :exports both
(directory-files ".")
#+END_SRC

#+RESULTS:
| . | .. | file-2.txt |


*** 3. Third result uses overriden property dir
:PROPERTIES:
:header-args:   :dir /home/mzimmermann/tmp/three
:END:

  This result uses the PROPERTIES  definition of dir = /home/mzimmermann/tmp/three

  #+BEGIN_SRC emacs-lisp  :exports both
  (directory-files ".")
  #+END_SRC

  #+RESULTS:
  | . | .. | file-3.txt |

* Tags                                                       :bb:aa:
Are labels for context (context = category)

* TODO Properies and columns

:PROPERTIES:
:COLUMNS:       %30ITEM %9Approved(Approved?){X} %Owner %11Status %10Time_Estimate{:} %CLOCKSUM %CLOCKSUM_T
:Owner_ALL:     John Peter Paul
:Status_ALL:    "In progress" "Not started yet" "Finished" ""
:Approved_ALL:  "[ ]" "[X]"
:END:


so this is column view?

** Subtree
:PROPERTIES:
:Owner: SomeoneElse 
:END:

* Startup indent test (using customize)

dfadsfadsf 
adfadsfasdf

** p1 
adfafd
asdfdsf
sdfasdf

*** p2 
sdfadfs
asdfadsf
adfd

* Test how org-html-publish-to-html and org-publish-attachment messes up export from image link to html by adding file:// to html!!

*The solution to this question is here*: http://stackoverflow.com/questions/14684263/how-to-org-mode-image-absolute-path-of-export-html

I am using org mode publishing to html, using C-c C-e h H (tried to publish to html file as well, same result). Is there a way to specify the link in org so that the published image path starts with /, like this:

<img src="/img/a-image.png" \>?

There does not seem to be a way to achieve this. I tried those:

Org                                 Published
[[/img/a-image.png]          BAD    <img src="f ile:///img/a-image.png" \>
[[./img/a-image.png]         OK     <img src="./img/a-image.png"\>
[[../img/a-image.png]        OK     <img src="../img/a-image.png"\>
[[f ile:///img/a-image.png]  BAD    <img src="f ile:///img/a-image.png"\>
[[f ile:img/a-image.png]     OK     <img src="img/a-image.png"\>
[[~/some-dir/img/a-image.png] BAD   <img src="f ile:///some-dir/img/a-image.png"\>

None of them resulter in what I am trying to get.

Basically, the publish puts file: in the src URL, unless the org link image path is one of:
- ./img
- ../img ../../img etc
- file:img 

If the org links uses a absolute path, or starts with file://, the publish adds file:/// to the img src url. (secondary question: is this a bug or is there a rationalle?)


* Live image capture and display test

This method is a compromise where published html on posts runs from 2017/04/post.html, reaching ../../img (img are on top, in _site)

This works both in org and html using the file: protocol, with a trick of maintaining 
a link to ../../img two levels above org/img

[[../../img/a-test-blog.org_20170416_034103_28551Ciq.png]]

This ^ generates: <img src="../../img/a-test-blog.org_20170416_034103_28551Ciq.png" alt="a-test-blog.org_20170416_034103_28551Ciq.png" />

Using the new org-custom-link-img-follow works 


[[img:a-test-blog.org_20170416_034103_28551Ciq.png]]

This ^ generates: <img src="/img/a-test-blog.org_20170416_034103_28551Ciq.png" alt="nil"/>

But two issues:

1. The image works in Jekyll but does not show in emacs
2. It is already obsolete
   #+BEGIN_QUOTE
   org-add-link-type is a compiled Lisp function in ‘org-compat.el’.

   (org-add-link-type TYPE &optional FOLLOW EXPORT)

   This function is obsolete since Org 9.0;
   use `org-link-set-parameters' instead.

   Add a new TYPE link.
   FOLLOW and EXPORT are two functions.
   #+END_QUOTE
3. Try this
   #+BEGIN_SRC elisp
    (org-open-file-with-emacs "./img/a-test-blog.org_20170416_034103_28551Ciq.png")
   #+END_SRC
4. This line shows why the img: will not display in emacs - only file: can be image
   #+BEGIN_SRC elisp
    (when (and (equal (org-element-property :type link) "file")
   #+END_SRC

* Test my specific org link types - *img:* and *post-jekyll:*

** Test img: link

[[img:a-test-blog.org_20170416_034103_28551Ciq.png]]

** Test post-jekyll: link

The precondition is the post must be already org2-published

[[post-jekyll:blog-in-org-2-jekyll---1.-motivation.org][a short series about writing in org mode]]
