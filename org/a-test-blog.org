#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:5 num:t tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+AUTHOR: mzimmerm
#+DATE: 2017-04-08 Sat 17:23
#+TITLE: a-test-blog 
#+DESCRIPTION: Testing org2jekyll-create-draft
#+TAGS: tag1 org2jekyll
#+CATEGORIES: categories_required

#+PROPERTY: header-args :dir /home/mzimmermann/tmp/one
#+COMMENTS: true

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="my-org-mode.css" />

  # + HTML_HEAD: <link rel="stylesheet" href="dakrone.github.io-org2.css" type="text/css" />

  # + HTML_HEAD: <link rel="stylesheet" type="text/css" href="my-org-mode.css" />

  # + HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;}</style>

  # + HTML_HEAD: <link rel="stylesheet" type="text/css" href="gongzhitaao-org-mode.css" /> "alternative style that works with org exported html"

  # + SETUPFILE: setup-html-export.txt "Any PROPERTY and other settings can be put here, and used in all blogs. This probably works if extension is org but then it's published"

*This post is a test of misc org features, and their Html export.Reviewed till ch 6 included. *

* Things I had to add or modify, to get org and org html export working

Details are inline, here is a summary.

** In export to html, to achieve 

- Nice fontification in Babel code blocks :: Installed from Melpa, package =htmlize=
- Images and links showing correctly :: Created new org mode tags for images and links,  *img:* and *post-jekyll:*
- ASCIIMath working :: customize ~org-export-with-sub-superscripts~ to 'do not interpret'. This can also be set per file using option ~#+OPTIONS: ^:nil~.
- Mathjax working :: in ~_includes/header.html~, added ~{ % include mathjax-stuff-new.html % }~ which adds script, src-ed to a online MathJax.js, properly configured as ~TeX-MML-AM_CHTML~.
- Export showing numbered headers, etc :: Modified front matter options generated by ~org2jekyll-create-draft~ from ~H: 2~ to 5, ~num: nil~ to t. Setting ~toc: t~ breaks export - the blog jumps out of Jekyll envelop. Use the following in future blog entries:
  - set # + OPTIONS H:5 num:t tags:nil toc:nil timestamps:t
  - this can be edited in org2jekyll.el source
- For my own ORG/{CSS, JS} files to be used by the Jekyll process, 2 steps are needed :: Remember Jekyll composes (aka messes up) the final HTML. Any added CSS, JS or other things that go to ~<header>~ must be added to ~_includes/header.html~:
  - add *# + HTML_HEAD: <link rel="stylesheet" type="text/css" href="my-org-mode.css" />* to the blog org file (this is needed for the css. js to be copied to $BLOG/css)
  - add a link href in *_includes/header.html* ~<link href="{{ site.baseurl }}/css/gongzhitaao-org-mode.css" rel="stylesheet" type="text/css">~ (this is needed because org2jekyll discards the <head> section after the html export, before copying result to _posts, to allow Jekyll composition from _includes/header.html). 
  - Touch to make CSS, JS etc published - If we want a changed or newly added CSS, JS to be copied to $BLOG/css, touch the file - the Org2jekyll publishing is sort of a make which only picks up changed files.

** To achieve my own formatting, added following files in ORG/{CSS, JS} files
 
  - Diobla :: see http://diobla.info/doc/rtags
  - Zhitao Gong  :: https://github.com/gongzhitaao/orgcss
  - My Org Theme :: my-org-mode.css
  - Theme from dakrone :: http://dakrone.github.io/org2.css

Note they need to be touched, and added to  *_includes/header.html* (see above)

*Currently (2017-07-14) I use my own CSS: ~my-org-mode.css~ which borrowe from some of the above.*

** Notes 
 
  - Properties on top :: All properties on top of the org file, except ~:header-args dir~, are front matter, generated by ~org2jekyll-create-draft~
  -  ~:header-args dir~ :: I added this to test some babel runs: this defines the default home directory for babel source code. 

* TODO Todos
- [X] use my own css
  - [X] but get better fonts
- [X] where in org2jekyll is the front matter created? can this be changed? - yes, see org2jekyll.el
- [ ] figure out how to export functional index - probably export from org and check result, reconcile with jekyll.

* Basic Babel export to Html

This source:

#+BEGIN_SRC org :exports code
,#+BEGIN_SRC sh :exports both
ls -1
,#+END_SRC
#+END_SRC

Results in this:

#+BEGIN_SRC sh :exports both
ls -1
#+END_SRC

#+RESULTS:
: file-1.txt

Both the code content and the result do show because we set ~:exports both~
* Running ~org2jekyll-create-draft~

Created an empty file with Org front matter like this:

#+BEGIN_SRC org
#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+AUTHOR: mzimmerm
#+DATE: 2017-04-08 Sat 17:23
#+TITLE: a-test-blog 
#+DESCRIPTION: Testing org2jekyll-create-draft
#+TAGS: org_mode org2jekyll
#+CATEGORIES: categories_required
#+END_SRC

The file name is *a-test-blog.org* so this is concatenated from title, with no date. 

* Verbatim vs Code markup: = vs ~

- This is a =literal (verbatim) text with link [[a link][http://some.html]]= (surrounded by = ) in text. 

- This is a ~literal code section text with link [[a link][http://some.html]]~  (surrounded by ~ ) in text. 
 
  - So the above, by default, shows that verbatim and code have same font after conversion to html.

* Inline code blocks - src _ language{ .. } and call _ func(arg1=1, arg2=2). Note: no space before {

  - Example 1 - exports code:
    - /text:/   ~src_sh[:exports code]{echo "hello"}~
    - /result:/ src_sh[:exports code]{echo "hello"}

  - Example 2 - exports both
    - Compare with ~echo hello~
    - /text:/   ~src_sh[:exports both]{echo "hello"}~
    - /result:/ src_sh[:exports both]{echo "hello"}

  - Example 3: - exports results. This is *most likely use* of inline code blocks
    - /text:/   ~src_sh[:exports results]{echo "hello"}~
    - /result:/ src_sh[:exports results]{echo "hello"} plugged in text, inline.

  - Example 4 - exports results. As above, showing exports results is default in src_
    -  /text:/ ~src_sh{echo "hello"}~
    - /result:/ src_sh{echo "hello"} plugged in text, inline.

  - Example 5: This shows the inside literally as code, so does not call the code
    - /text:/   ~src_sh[:exports code]{ls -l}~ allsurrounded by ~ in text: 
    - /result:/ ~src_sh[:exports code]{ls -l}~

  - Example 6: Defining function add_in_shell in BEGIN_ SRC 

    - /text:/
      #+BEGIN_SRC 
        ,#+name: add_in_shell
        ,#+BEGIN_SRC sh :var arg1=1 :var arg2=2
        echo arg1 plus arg2 = $(($arg1 + $arg2))
        ,#+END_SRC
      #+END_SRC
    - /result:/ - this displays code, correctly fontified:
      #+name: add_in_shell
      #+BEGIN_SRC sh :var arg1=1 :var arg2=2
      echo arg1 plus arg2 = $(($arg1 + $arg2))
      #+END_SRC

  - Example 7:

    - /text:/   The following files are in home dir ~src_sh{ ls -1 }~
    - /result:/ The following files are in home dir src_sh{ ls -1 }

  - Example 8: Calling add_in_shell:
    - /text:/   ~call_add_in_shell(arg1=3, arg2=4)~
    - /result:/ call_add_in_shell(arg1=3, arg2=4)

* Three types of lists

There are 3 types of lists in org. This is how they convert to html:

1. /Ordered List = Numbered List/: Shopping list
   1. The Attack of the Clones
   2. Drones
      + Blue 
      + Red
   3. Coffee
2. /Unordered List = Bulleted List/: Favourite Movies, no particular order:
   - Krakatit.
   - The Avatar.
3. /Description List/: No order. Has :: between key and value. Key is highlighted. Does not indent items.
   - Karel Capek   :: Povetron
   - Karel Capek   :: Valka s Mloky. The description list also wraps very nicely after the : : .
   - Abrakah Dabra :: Is cool.

* Code highlighting

Needed =htmlize= to work.

Sh code:

#+BEGIN_SRC sh :exports code :results raw

  AVAR="something 1"
  OTHER="soma else"

  echo "Variable AVAR is set to ${AVAR}"
  if [ $AVAR = "something" ]; then
      echo "AVAR was as expected"
  else
      echo "UNEXPECTED AVAR"
  fi

  echo "In shell, :results output is default; can add ~raw~ to not use TABLES IN RESULTS"

#+END_SRC


Python code equivalent:

#+BEGIN_SRC python :exports code

  AVAR   = "something"
  OTHER  = "soma else"

  print ("Variable AVAR is set to ") + AVAR
  if AVAR == "something":
      print( "AVAR was as expected")
  else:
      print ("UNEXPECTED AVAR")

  return "In python, :results value is default, as python returns"
#+END_SRC


* TODO Properties
:PROPERTIES:
:one:      1
:END:

A property is a key-value pair associated with an entry. Here, "entry" is:

- the whole document
- tree started with heading

Properties can be set so they are associated with a single entry, with every entry in a tree, or with every entry in an Org mode file.

Properties are like tags, but with a value. 

Where can property be defined:

- Either anywhere in file (but do it always on top) as 
  #+BEGIN_SRC org
  #+PROPERTY: property-name-string property-value-string
  #+END_SRC
- Or in a drawer just below a heading as  
  #+BEGIN_SRC org
  :PROPERTIES:
  :property-name-string: property-value-string
  :END:
  #+END_SRC

Note the syntactic difference on how the key is defined 

- in the PROPERTY section, *key is NOT surrounded with :* 
- in the :PROPERTIES: drawer, *key IS surrounded with :* 

But the *key name* is in both cases =property-name-string=

For someone using org-babel a lot, I have really only encountered use of properties in defining the overwhelmingly complex property called header-args.

For the longest time, I was confused in how properties are used  *TODO* - finish this

** Testing the =header-arguments :dir= property

*** Create some dirs

#+BEGIN_SRC sh :exports code
mkdir --parent /home/mzimmermann/tmp/{one,two,three}
echo "" > /home/mzimmermann/tmp/one/file-1.txt
echo "" > /home/mzimmermann/tmp/two/file-2.txt
echo "" > /home/mzimmermann/tmp/three/file-3.txt

#+END_SRC

#+RESULTS:

There is a standard property with key named =dir=. This is a path to directory where Babel source blocks are executed.

This experiment shows how the =dir property= is used.

*** First result uses global (top) definition of dir = /home/mzimmermann/tmp/one

#+BEGIN_SRC emacs-lisp :exports both :results raw
(directory-files ".")
#+END_SRC

#+RESULTS:
(. .. file-1.txt file-in-directory-one.txt)


*** Second result uses the BEGIN_ SRC  definition of dir = /home/mzimmermann/tmp/two

#+BEGIN_SRC emacs-lisp :dir /home/mzimmermann/tmp/two  :exports both  :results raw
(directory-files ".")
#+END_SRC

#+RESULTS:
(. .. file-2.txt)


*** Third result uses overriden property dir
:PROPERTIES:
:header-args:   :dir /home/mzimmermann/tmp/three
:END:

  This result uses the PROPERTIES  definition of dir = /home/mzimmermann/tmp/three

  #+BEGIN_SRC emacs-lisp  :exports both :results raw
  (directory-files ".")
  #+END_SRC

  #+RESULTS:
  | . | .. | file-3.txt |

* Tags                                                       :bb:aa:
Are labels for context (context = category)

* TODO Properies and columns

:PROPERTIES:
:COLUMNS:       %30ITEM %9Approved(Approved?){X} %Owner %11Status %10Time_Estimate{:} %CLOCKSUM %CLOCKSUM_T
:Owner_ALL:     John Peter Paul
:Status_ALL:    "In progress" "Not started yet" "Finished" ""
:Approved_ALL:  "[ ]" "[X]"
:END:


so this is column view?

** Subtree
:PROPERTIES:
:Owner: SomeoneElse 
:END:

* Startup indent test (using customize)

dfadsfadsf 
adfadsfasdf

** p1 
adfafd
asdfdsf
sdfasdf

*** p2 
sdfadfs
asdfadsf
adfd

* Problem 1: org-html-publish-to-html and org-publish-attachment messes up export from image link to html by adding file:// to html
** The better solution - creating new org mode tags: *img:* and *post-jekyll:*

*The core of the solution is here, and now in my init.el*: http://stackoverflow.com/questions/14684263/how-to-org-mode-image-absolute-path-of-export-html

With help from the above link, I created my new org mode tags: *img:* and *post-jekyll:*. Then I added functions (in init.el), managing how they are exported.

*** Test the correct solution: my specific org link types - *img:* and *post-jekyll:*

Using the new org-custom-link-img-follow works: /*expected:* a small image just after the dash/ - [[img:a-test-blog.org_20170416_034103_28551Ciq.png]]. More tests below.

The link above uses the "new" ~img~ tag, and generates the slash starting src: <img src="/img/a-test-blog.org_20170416_034103_28551Ciq.png" alt="nil"/>

But two issues:

1. The image works in Jekyll but does not show in emacs

2. It is already obsolete in org 8. Org 9 requires a different solution. See this doc from org documentation:
  #+BEGIN_QUOTE
  org-add-link-type is a compiled Lisp function in ‘org-compat.el’.
  
  (org-add-link-type TYPE &optional FOLLOW EXPORT)
  
  This function is obsolete since Org 9.0;
  use `org-link-set-parameters' instead.
  
  Add a new TYPE link.
  FOLLOW and EXPORT are two functions.
  #+END_QUOTE

3. Try this
  #+BEGIN_SRC elisp
  (org-open-file-with-emacs "./img/a-test-blog.org_20170416_034103_28551Ciq.png")
  #+END_SRC

4. This line shows why the img: will not display in emacs - only file: can be image
  #+BEGIN_SRC elisp
  (when (and (equal (org-element-property :type link) "file")
  #+END_SRC

*** Test my ~img:~ link

The link ~[[img:a-test-blog.org_20170416_034103_28551Ciq.png]]~ after html conversion, /*expected:* a small image just after the dash/ - [[img:a-test-blog.org_20170416_034103_28551Ciq.png]]

*** Test my ~post-jekyll:~ link

The precondition is the post must be already org2-published

The link ~[[post-jekyll:blog-in-org-2-jekyll---1.-motivation.org][a short series about writing in org mode]]~ after html conversion, /*expected:* a working link just after the dash/ - [[post-jekyll:blog-in-org-2-jekyll---1.-motivation.org][a short series about writing in org mode]]

** The workaround solution - creating a link for images

There is a simpler but hack-ier solution to display exported images correctly: We create a directory link from the org/img directory to a img directory above the posts. This works because the generated ~<img src=../../some-img.png>~ tag in, say, 2017/04/a-test-blog.html, reaches ../../img.

This makes images works both in org and html.

In more detail, do this:

#+BEGIN_SRC sh
cd $BLOG # e.g. /whatever/mzimmerm.github.io/
cd ..
ln -s $BLOG/org/img img
#+END_SRC 

Now in org, we can use the "regular" file:/// link for images - as long as images are placed to the $BLOG/../img directory, image links will work after html conversion and serving in Jekyll.

*** Testing the workaround solution

This should display a image:

[[../../img/a-test-blog.org_20170416_034103_28551Ciq.png]]

The link above, generates html like this: ~<img src="../../img/a-test-blog.org_20170416_034103_28551Ciq.png" alt="a-test-blog.org_20170416_034103_28551Ciq.png" />~

** Problem in detail (solutions described above):

I am using org mode publishing to html, using C-c C-e h H (tried to publish to html file as well, same result). Is there a way to specify the link in org so that the published image path starts with /, like this:

#+BEGIN_QUOTE
<img src="/img/a-image.png" \>?
#+END_QUOTE

Note: The starting slash is a standard in any "normal" static html serving, as in expresses "path from the served root"

There is not way to achieve this in "out of the box" org mode*. I tried those:

#+BEGIN_QUOTE
Org                                 Published
[[/img/a-image.png]          BAD    <img src="f ile:///img/a-image.png" \>
[[./img/a-image.png]         OK     <img src="./img/a-image.png"\>
[[../img/a-image.png]        OK     <img src="../img/a-image.png"\>
[[f ile:///img/a-image.png]  BAD    <img src="f ile:///img/a-image.png"\>
[[f ile:img/a-image.png]     OK     <img src="img/a-image.png"\>
[[~/some-dir/img/a-image.png] BAD   <img src="f ile:///some-dir/img/a-image.png"\>

#+END_QUOTE

None of them results in what I am trying to get.

Basically, the publish puts file: in the src URL, unless the org link image path is one of:
- ./img
- ../img ../../img etc
- file:img 

If the org links uses a absolute path, or starts with file://, the publish adds file:/// to the img src url. (secondary question: is this a bug or is there a rationalle?)

* MathJax configurations

MathJax can be passed options to configure it to display varioius formats

#+BEGIN_QUOTE
Here's snippet from our documentation http://docs.mathjax.org/en/latest/configuration.html 

TeX-MML-AM_HTMLorMML.js
Allows math to be specified in TeX, LaTeX, MathML, or AsciiMath notation, with the AMSmath and AMSsymbols packages included, producing output using MathML if the browser supports it sufficiently, and HTML-with-CSS otherwise.
#+END_QUOTE



* Math Formulas using Latex

First, delete this stuff: Must be configured directly in Jekyll, in mathjax-stuff-new.html
OPTIONS: tex:t
HTML_MATHJAX: path:"http://cdn.mathjax.org/mathjax/latest/MathJax.js"
HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler


There are 3 ways to put Latex in org text

1. Start with \begin .. \end{equation}, surround by empty lines

  \begin{equation}  x=\sqrt{b}
  \end{equation}

2. Start with double dollar $ $ on lines above and below:  display mode: \ [...\ ] or $ $...$ $

  $$
  x = \sqrt{b} + c^4
  $$

3. Inline mode: \(...\) or $...$ but this may clash on export with dollars etc. *do not use $*

  $x = \sqrt{b} + c^4$

4. If in doubt for inline, use the above: group inside slash-( slash-) like in this: ~\ ( some latex \ ). That  works even inline, e.g. \( x = \sqrt{b} + c^4 \) - nice.

5. Try org-preview-latex-fragment (bound to C-c C-x C-l). s C-c C-x C-l here (or C-u C-c C-x C-l to preview everything in the subtree, or C-u C-u C-c C-x C-l to preview everything in the buffer)

6. 
* Math Formulas using ASCIIMath

*An important prerequisit to get this working in org export, is to customize ~org-export-with-sub-superscripts~ to 'do not interpret'. This can also be set per file using option # + OPTIONS: ^:nil*
 
Sum: `sum_(i=1)^n i^3=((n(n+1))/2)^2`

Prescripts: `{::}_(\92)^238U` or `{::}_92^238U` ? Both work, so use simple one

Separate the < sign with spaces so `x < y` displays nicely 

Integrals: `int_0^oo e^(-x^2) dx = sqrt(pi) / 2`

After some trying, these are the ways to number equations - no way to do it on the right, and no way to add spacing

So just use the first, e.g. (1).

This renders nice:

(1) `a^2 + b^2 = c^2`

(2) `ax^2 + bx + c = 0`

(3) `x = (-b+-sqrt(b^2-4ac))/(2a)`

Below, space before dot prevents interpretation as list item li

This does not render nice:

1 .   `m = (y_2 - y_1)/(x_2 - x_1) = (Delta y)/(Delta x)`

2 .   `f'(x) = lim_(Delta x->0)(f(x+Delta x)-f(x))/(Delta x)`

3 .   `d/dx [x^n] = nx^(n - 1)`

This renders nice:

`7 . int_a^b f(x) dx = [F(x)]_a^b = F(b) - F(a)`

`8 . int_a^b f(x) dx = f(c) (b - a)`

`9 . "average value"=1/(b-a) int_a^b f(x) dx`

`10 . d/dx[int_a^x f(t) dt] = f(x)`



