#+TODO: TODO IN-PROGRESS WAITING DONE CANCELED
#+STARTUP: indent



- [ ] *Fix this*
  org-babel-exp processing... [2 times]
  Cannot fontify src block (htmlize.el >= 1.34 required) [14 times]
- [X] Fix = to ~ in posts and todo
- [X] review org/html side by side
  - [X] compare result HTML with org - check how org converts:

  - [X] == , ~~ ** sections

  - [X] links

  - [X] dot jots (is space surrond needed?? no

  - [X] BEGIN_SRC

- [ ] click on Github, tries to connect to https://github.com/github.com/mzimmerm/mzimmerm.github.io 

- [ ] Add to a-test-blog.org
  - [ ] Images

- [ ] start blog about Dart types
- [ ] figure out how to link a post from Google plus.
- [X] later

  - [X] figure out how to create and export pages in org mode

  - [X] figure out how to add image to post - MY OWN IMG LINK

- [X] Configure Disqus:

  - [X] Adding Disqus account for my blog
  - [X] See https://help.disqus.com/customer/portal/articles/466208 
    - [X] Go to https://disqus.com/admin/create/ (Create a new site)
    - [X] On website name, set it to this site URL https: // mzimmerm.github.io
    - [X] Category tech, next
    - [X] Select Jekyll
  - [X] My website shortname is https - mzimmerm - github - io
  - [X] To _config.yml, set disqus: ' the above string no spaces'
  - [X] At the beginning of blog "front matter" add a line with
    #+BEGIN_SRC org
    #+COMMENTS: true
    #+END_SRC

* Jomk Media Blog


* KEEP - future blogs.
 

** Blog in Org2jekyll - 5. Debug failures in ~org2jekyll-publish-post~

This post is part 5 of [[post-jekyll:blog-in-org-2-jekyll---1.-motivation.org][a short series about writing in org mode]], using org2jekyll.

Errors during "org publishing" are quiet in org2jekyll. After running ~org2jekyll-publish-post~, one should check if the post from the ~org~ directory ended up in the ~_posts~ directory with ~.html~ extension. If it did not, look for errors in emacs ~*Messages*~ buffer.

You will likely see errors pointing to a Org syntax in your ~.org~ file which Org failed to convert (publish) to html. 

*** An example of error:

#+BEGIN_EXAMPLE
deferred error : (user-error "Unable to resolve link: \"Jekyll\"")
#+END_EXAMPLE 

I'd search the  ~org~ directory posts for the string. This is where some confusion begins. When the   ~org2jekyll-publish-post~ failes on ~a-test-post.org~
_, it leaves another file in the ~org~ directory named ~2017-04-18-a-test-post.org~. Ignore this "dated" version in your search, just look into  ~org2jekyll-publish-post~ for the offending string.

For errors in links like the above, I'd change the blog buffer mode to text-mode for a while to see the links internals.

*** Another example of error

#+BEGIN_EXAMPLE
deferred error : (file-error "Opening directory" "No such file or directory" "/home/mzimmermann/dev/my-projects-source/public-on-github/mzimmerm.github.io/org/img")
#+END_EXAMPLE



** Blog in Org2jekyll - 6. About Jekyll directory structure; What does ~jekyll build~ do?

This post is part 6 of [[post-jekyll:blog-in-org-2-jekyll---1.-motivation.org][a short series about writing in org mode]], using org2jekyll.

It describes how Jekyll builds pages or posts from ~.org~ files. I will use this example post:

#+BEGIN_SRC org
todo
#+END_SRC

*** How does the ~jekyll build~ command builds it's result html page/post in the ~_site~ directory?

~jekyll build~ uses those steps:

 - Iterate each .md or .html file in _posts, and in root of the site (in mzimmerm.github.io)
   - In the .md and .html file (page or post) lookup the Front Matter ~layout~ tag (in our example, ~layout~ is ~post~)
   - Look at the Yaml front matter ~layout~ tag to start building the page. Use the directory ~_layout~ to build final html in _site from the ~.md~. If you create a org file named ~org/a-test-blog.org~ and give it ~#+LAYOUT: post~, Jekyll uses the file ~_layouts/post.html~ as the "envelope" of the generated page. 
   - The ~_layouts/post.html~ file contains some {% include %} sections and some html combined with more Liquid sections {{ out }} and {% tag %}, this is a brief form
     #+BEGIN_SRC liquid
     {% include header.html %}

     <div class="container container-left">
       {% include sidebar.html %}
     </div>

     {% include disqus-comments.html %}
     {% include footer.html %}
     #+END_SRC
   - Note: ~_includes~ is the directory where all files mentioned in  ~{% include included-file.html %}~ should be located.
   - The Liquid tag processing starts processing the ~_layouts/post.html~, first including templates, next processing the Liqud template logic of {{ }} and {% %}
   - The result of Liquid processing is an ~.html~ file.
   - The resulting html file is placed to the ~_site~ directory - This is where ~jekyll serve~ finds the files served by the HTTP server.
 
** Blog in Org2jekyll - 7. Test Jekyll blog locally; What does ~jekyll serve~ do?

This post is part 7 of [[post-jekyll:blog-in-org-2-jekyll---1.-motivation.org][a short series about writing in org mode]], specifically using org2jekyll.

 Normally, ~jekyll serve~ starts the HTTP server, serving all files from directory ~_site~. It does not regenerate the ~.md~ and ~.html~ files from the ~_posts~ directory, and the root level.  There are a few things to notice

 - A Yaml variable from ~_config.yml~ can be forced to a different value at startup, for example: 
   - ~jekyll serve --baseurl=''~ (set baseurl to empty)
- Jekyll can be asked to incremetally generate on changes
   - ~jekyll serve --incremental~ (incremental regeneration on ~_config.yml~ change)
-  Options can be combined
   - ~jekyll serve --incremental --baseurl=''~

** TODO Add post on displaying and html converting images - see init.el "img" and

** TODO Add post How I added Org mode Latex publishing to enable nice Math presentation to this blog:

First attempt which did work locally, but did NOT work when running on Github pages.

- First, outside Jekyll, worked out an example which exports (C-c C-e h h) an org file with Latex using MathJax. 
- Looked in the <head> section of the resulting HTML.
- Took almost all content of the <head> and placed it to Jekyll, into a file =_includes/mathjax-stuff.html=
- Added the include to mathjax-stuff.html to =_includes/header.html=
- You can see the result in https://mzimmerm.github.io/ -> click on Github , look into the =_includes= folder

Second succesful attempt

- Added a ~include mathjax-stuff-new~ section to =_includes/header.html= 
  #+BEGIN_SRC html
  <head>
    <!-- preexisting stuff  -->
    {% include mathjax-stuff-new.html %}
  </head>
  #+END_SRC
- Added a new file =_includes/mathjax-stuff-new.html=
  #+BEGIN_SRC html
    <script type="text/x-mathjax-config"> MathJax.Hub.Config({ TeX: { equationNumbers: { autoNumber: "all" } } }); </script>
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
      tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
      }
      });
    </script>
    <!-- 
         <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
         -->
    <script type="text/javascript" async
            src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>
  #+END_SRC
- Thehe result can be seen in https://mzimmerm.github.io/ -> click on Github , look into the =_includes= folder
